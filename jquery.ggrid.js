// Generated by CoffeeScript 1.9.1
(function() {
  (function($) {
    return $.fn.extend({
      ggrid: function(options) {
        var $this, chunk, i, images, iter, methods, settings, template;
        $this = this;
        settings = {
          columns: 3,
          maxWidth: 910,
          padding: 5
        };
        settings = $.extend(settings, options);
        methods = {
          makeRow: function(images) {
            var $out, constanta, image, j, len, maxWidth, width;
            $out = $("<div data-paragraph-count='" + images.length + "' class='row'></div>");
            constanta = 1 / images.reduceRight(function(one, two) {
              if (images.length !== 1) {
                return (one.data ? 1 / (Number(one.data.gphoto$height.$t) / Number(one.data.gphoto$width.$t)) : one) + 1 / (Number(two.data.gphoto$height.$t) / Number(two.data.gphoto$width.$t));
              }
            });
            for (j = 0, len = images.length; j < len; j++) {
              image = images[j];
              if (images.length !== 1) {
                width = constanta / (Number(image.data.gphoto$height.$t) / Number(image.data.gphoto$width.$t)) * 100;
                maxWidth = Math.round(settings.maxWidth / 100 * width);
              } else {
                width = 100;
                maxWidth = 0;
              }
              $out.append("<div class='col' style='width: " + width + "%;'>\n	<a href=\"" + image.imageUrl + "w0\">\n		<img class='img-responsive' src='" + image.imageUrl + "w" + maxWidth + "/' alt='' />\n	</a>\n</div>");
            }
            $this.append($out);
          }
        };
        images = options.data;
        if (options.template != null) {
          template = options.template.split('-');
        }
        chunk;
        i = 0;
        iter = 0;
        while (i < images.length) {
          if (template != null ? template[iter] : void 0) {
            chunk = Number(template[iter]);
            iter++;
          } else {
            chunk = images.length - (i + settings.columns) === 1 ? settings.columns - 1 : settings.columns;
          }
          methods.makeRow(images.slice(i, i + chunk));
          i += chunk;
        }
        return this.each(function() {
          console.log('ggrid');
        });
      }
    });
  })(jQuery);

}).call(this);

//# sourceMappingURL=jquery.ggrid.js.map
